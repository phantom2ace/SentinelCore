import os
import requests
import logging
import time
from dotenv import load_dotenv
from database import Asset, Vulnerability, Service, engine
from sqlalchemy.orm import sessionmaker

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('SentinelVulnScanner')
Session = sessionmaker(bind=engine)

# NVD API configuration
NVD_API = "https://services.nvd.nist.gov/rest/json/cves/2.0"
API_KEY = os.getenv('NVD_API_KEY')  # Get from .env file
HEADERS = {'apiKey': API_KEY} if API_KEY else {}

def get_cves_for_software(name, version):
    """
    Fetch CVEs for a specific software from NVD API
    Returns list of vulnerability dictionaries
    """
    try:
        # Format CPE for better matching
        cpe_name = f"cpe:2.3:a:*:{name.lower()}:{version}:*:*:*:*:*:*:*" if version else ""
        
        params = {
            'keywordSearch': f"{name} {version}" if not cpe_name else "",
            'cpeName': cpe_name,
            'resultsPerPage': 200
        }
        
        logger.debug(f"Querying NVD API for: {name} {version}")
        response = requests.get(NVD_API, params=params, headers=HEADERS, timeout=30)
        response.raise_for_status()
        
        # Handle API rate limiting
        if 'X-RateLimit-Remaining' in response.headers:
            remaining = int(response.headers['X-RateLimit-Remaining'])
            reset_time = int(response.headers['X-RateLimit-Reset'])
            if remaining < 5:
                logger.warning(f"API rate limit low: {remaining} requests remaining")
                time.sleep(reset_time + 1)
        
        data = response.json()
        return data.get('vulnerabilities', [])
    
    except requests.exceptions.RequestException as e:
        logger.error(f"API request failed: {str(e)}")
    except ValueError as e:
        logger.error(f"JSON parsing error: {str(e)}")
    return []

def scan_vulnerabilities():
    """
    Main vulnerability scanning function
    Scans all assets and services in the database
    """
    session = Session()
    assets = session.query(Asset).all()
    
    if not assets:
        logger.warning("No assets found. Run discovery scan first.")
        return
    
    logger.info(f"Starting vulnerability scan for {len(assets)} assets")
    total_vulns = 0
    
    for asset in assets:
        logger.info(f"🔍 Scanning asset: {asset.hostname} ({asset.ip})")
        
        services = session.query(Service).filter_by(asset_id=asset.id).all()
        if not services:
            logger.debug(f"No services found for {asset.ip}")
            continue
        
        for service in services:
            if not service.name or service.name.lower() in ['unknown', '']:
                continue
                
            # Clean service name
            service_name = service.name.split(':')[0].strip()
            logger.info(f"  Checking service: {service_name} {service.version}")
            
            vulnerabilities = get_cves_for_software(service_name, service.version or "")
            
            for vuln_data in vulnerabilities:
                cve = vuln_data.get('cve', {})
                cve_id = cve.get('id', '')
                
                # Get English description
                description = next(
                    (desc['value'] for desc in cve.get('descriptions', []) 
                     if desc['lang'] == 'en'),
                    'No description available'
                )
                
                # Get CVSS score (prefer V3.1, then V3.0, then V2)
                cvss_metrics = cve.get('metrics', {})
                cvss_score = 0.0
                
                if 'cvssMetricV31' in cvss_metrics:
                    cvss_score = cvss_metrics['cvssMetricV31'][0]['cvssData']['baseScore']
                elif 'cvssMetricV30' in cvss_metrics:
                    cvss_score = cvss_metrics['cvssMetricV30'][0]['cvssData']['baseScore']
                elif 'cvssMetricV2' in cvss_metrics:
                    cvss_score = cvss_metrics['cvssMetricV2'][0]['cvssData']['baseScore']
                
                # Check exploit status
                exploit_available = any(
                    'exploit' in ref['url'].lower() or 'github.com' in ref['url']
                    for ref in cve.get('references', [])
                )
                
                # Save vulnerability to database
                vuln = Vulnerability(
                    cve_id=cve_id,
                    description=description[:499],
                    cvss_score=cvss_score,
                    exploit_available=exploit_available,
                    asset_id=asset.id
                )
                session.add(vuln)
                total_vulns += 1
                logger.info(f"    - Found {cve_id} (CVSS: {cvss_score:.1f})")
            
            # Respect API rate limits (5 requests per 30 seconds without API key)
            if not API_KEY:
                time.sleep(6.0)  # 6 seconds between requests
            else:
                time.sleep(0.5)  # 0.5 seconds with API key
    
    session.commit()
    logger.info(f"✅ Vulnerability scan complete! Found {total_vulns} vulnerabilities")